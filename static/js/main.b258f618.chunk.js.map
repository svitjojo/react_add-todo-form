{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","preparedTodos","userId","usersFromServer","find","App","useState","selectedUserName","setSelectedUserName","setTodos","setTitle","isSubmitted","setIsSubmitted","showErrorMessage","condition","message","action","method","type","placeholder","value","onChange","event","target","disabled","onClick","preventDefault","selectedUser","newTodo","Math","max","addTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b258f618.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const preparedTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [selectedUserName, setSelectedUserName] = useState('');\n  const [todos, setTodos] = useState(preparedTodos);\n  const [title, setTitle] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const getNewId = () => (\n    Math.max(...todos.map(todo => todo.id)) + 1\n  );\n\n  const addTodo = () => {\n    const selectedUser = usersFromServer.find(\n      user => user.name === selectedUserName,\n    );\n\n    if (!selectedUser) {\n      return;\n    }\n\n    const newTodo = {\n      id: getNewId(),\n      title,\n      completed: false,\n      userId: selectedUser.id,\n      user: selectedUser,\n    };\n\n    setTodos([...todos, newTodo]);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setSelectedUserName('');\n    setIsSubmitted(false);\n  };\n\n  const handleSubmit = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    event.preventDefault();\n    setIsSubmitted(true);\n\n    if (selectedUserName && title) {\n      addTodo();\n      resetForm();\n    }\n  };\n\n  const showErrorMessage = (condition: boolean, message: string) => (\n    condition && (<span className=\"error\">{message}</span>)\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            name=\"title\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => setTitle(event.target.value)}\n          />\n\n          {showErrorMessage(!title && isSubmitted, 'Please enter a title')}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserName}\n            onChange={(event) => setSelectedUserName(event.target.value)}\n          >\n            <option value=\"\" disabled>Choose a user</option>\n            {usersFromServer.map(user => {\n              const { name, id } = user;\n\n              return (\n                <option value={`${name}`} key={id}>\n                  {name}\n                </option>\n              );\n            })}\n          </select>\n\n          {showErrorMessage(\n            !selectedUserName && isSubmitted,\n            'Please choose a user',\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleSubmit}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}